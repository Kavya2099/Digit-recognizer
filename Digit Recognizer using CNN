{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a5144107",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:07.367649Z",
     "iopub.status.busy": "2024-05-06T12:04:07.366607Z",
     "iopub.status.idle": "2024-05-06T12:04:08.101503Z",
     "shell.execute_reply": "2024-05-06T12:04:08.098724Z"
    },
    "papermill": {
     "duration": 0.747606,
     "end_time": "2024-05-06T12:04:08.103893",
     "exception": false,
     "start_time": "2024-05-06T12:04:07.356287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/sample-test-set/test 4.jpg\n",
      "/kaggle/input/sample-test-set/test 2.jpg\n",
      "/kaggle/input/sample-test-set/test 5.jpg\n",
      "/kaggle/input/sample-test-set/test 3.jpg\n",
      "/kaggle/input/sample-test-set/test 1.jpg\n",
      "/kaggle/input/digit-recognizer/sample_submission.csv\n",
      "/kaggle/input/digit-recognizer/train.csv\n",
      "/kaggle/input/digit-recognizer/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c088488",
   "metadata": {
    "papermill": {
     "duration": 0.007999,
     "end_time": "2024-05-06T12:04:08.120841",
     "exception": false,
     "start_time": "2024-05-06T12:04:08.112842",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Reading training and testing dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa93a5bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:08.139509Z",
     "iopub.status.busy": "2024-05-06T12:04:08.138741Z",
     "iopub.status.idle": "2024-05-06T12:04:11.553833Z",
     "shell.execute_reply": "2024-05-06T12:04:11.552857Z"
    },
    "papermill": {
     "duration": 3.426994,
     "end_time": "2024-05-06T12:04:11.556169",
     "exception": false,
     "start_time": "2024-05-06T12:04:08.129175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train= pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n",
    "train.shape\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "56f899b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:11.574931Z",
     "iopub.status.busy": "2024-05-06T12:04:11.574543Z",
     "iopub.status.idle": "2024-05-06T12:04:13.513630Z",
     "shell.execute_reply": "2024-05-06T12:04:13.512554Z"
    },
    "papermill": {
     "duration": 1.9512,
     "end_time": "2024-05-06T12:04:13.516192",
     "exception": false,
     "start_time": "2024-05-06T12:04:11.564992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>pixel9</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
       "0       0       0       0       0       0       0       0       0       0   \n",
       "1       0       0       0       0       0       0       0       0       0   \n",
       "2       0       0       0       0       0       0       0       0       0   \n",
       "3       0       0       0       0       0       0       0       0       0   \n",
       "4       0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 784 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test= pd.read_csv('/kaggle/input/digit-recognizer/test.csv')\n",
    "test.shape\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b14541d",
   "metadata": {
    "papermill": {
     "duration": 0.008411,
     "end_time": "2024-05-06T12:04:13.533550",
     "exception": false,
     "start_time": "2024-05-06T12:04:13.525139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "dropping label column from x_train dataset and adding it in y_train "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9b738b1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:13.552936Z",
     "iopub.status.busy": "2024-05-06T12:04:13.552100Z",
     "iopub.status.idle": "2024-05-06T12:04:13.561406Z",
     "shell.execute_reply": "2024-05-06T12:04:13.560534Z"
    },
    "papermill": {
     "duration": 0.021316,
     "end_time": "2024-05-06T12:04:13.563480",
     "exception": false,
     "start_time": "2024-05-06T12:04:13.542164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        1\n",
       "1        0\n",
       "2        1\n",
       "3        4\n",
       "4        0\n",
       "        ..\n",
       "41995    0\n",
       "41996    1\n",
       "41997    7\n",
       "41998    6\n",
       "41999    9\n",
       "Name: label, Length: 42000, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train= train['label']\n",
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c5a5f98f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:13.584076Z",
     "iopub.status.busy": "2024-05-06T12:04:13.583402Z",
     "iopub.status.idle": "2024-05-06T12:04:13.709568Z",
     "shell.execute_reply": "2024-05-06T12:04:13.708517Z"
    },
    "papermill": {
     "duration": 0.138295,
     "end_time": "2024-05-06T12:04:13.711700",
     "exception": false,
     "start_time": "2024-05-06T12:04:13.573405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>pixel9</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41995</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41996</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41997</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41998</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41999</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>42000 rows × 784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
       "0           0       0       0       0       0       0       0       0       0   \n",
       "1           0       0       0       0       0       0       0       0       0   \n",
       "2           0       0       0       0       0       0       0       0       0   \n",
       "3           0       0       0       0       0       0       0       0       0   \n",
       "4           0       0       0       0       0       0       0       0       0   \n",
       "...       ...     ...     ...     ...     ...     ...     ...     ...     ...   \n",
       "41995       0       0       0       0       0       0       0       0       0   \n",
       "41996       0       0       0       0       0       0       0       0       0   \n",
       "41997       0       0       0       0       0       0       0       0       0   \n",
       "41998       0       0       0       0       0       0       0       0       0   \n",
       "41999       0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "       pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  \\\n",
       "0           0  ...         0         0         0         0         0   \n",
       "1           0  ...         0         0         0         0         0   \n",
       "2           0  ...         0         0         0         0         0   \n",
       "3           0  ...         0         0         0         0         0   \n",
       "4           0  ...         0         0         0         0         0   \n",
       "...       ...  ...       ...       ...       ...       ...       ...   \n",
       "41995       0  ...         0         0         0         0         0   \n",
       "41996       0  ...         0         0         0         0         0   \n",
       "41997       0  ...         0         0         0         0         0   \n",
       "41998       0  ...         0         0         0         0         0   \n",
       "41999       0  ...         0         0         0         0         0   \n",
       "\n",
       "       pixel779  pixel780  pixel781  pixel782  pixel783  \n",
       "0             0         0         0         0         0  \n",
       "1             0         0         0         0         0  \n",
       "2             0         0         0         0         0  \n",
       "3             0         0         0         0         0  \n",
       "4             0         0         0         0         0  \n",
       "...         ...       ...       ...       ...       ...  \n",
       "41995         0         0         0         0         0  \n",
       "41996         0         0         0         0         0  \n",
       "41997         0         0         0         0         0  \n",
       "41998         0         0         0         0         0  \n",
       "41999         0         0         0         0         0  \n",
       "\n",
       "[42000 rows x 784 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train= train.drop(labels='label',axis=1)\n",
    "x_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "053d09c5",
   "metadata": {
    "papermill": {
     "duration": 0.009088,
     "end_time": "2024-05-06T12:04:13.730299",
     "exception": false,
     "start_time": "2024-05-06T12:04:13.721211",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Visualizing the count of numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "46efed11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:13.750796Z",
     "iopub.status.busy": "2024-05-06T12:04:13.750151Z",
     "iopub.status.idle": "2024-05-06T12:04:15.182554Z",
     "shell.execute_reply": "2024-05-06T12:04:15.181388Z"
    },
    "papermill": {
     "duration": 1.445413,
     "end_time": "2024-05-06T12:04:15.185006",
     "exception": false,
     "start_time": "2024-05-06T12:04:13.739593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "1    4684\n",
       "7    4401\n",
       "3    4351\n",
       "9    4188\n",
       "2    4177\n",
       "6    4137\n",
       "0    4132\n",
       "4    4072\n",
       "8    4063\n",
       "5    3795\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "count= sns.countplot(x=y_train)\n",
    "y_train.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f6cbe6d",
   "metadata": {
    "papermill": {
     "duration": 0.009661,
     "end_time": "2024-05-06T12:04:15.205046",
     "exception": false,
     "start_time": "2024-05-06T12:04:15.195385",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To see a sample image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1930a78a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:15.227989Z",
     "iopub.status.busy": "2024-05-06T12:04:15.227600Z",
     "iopub.status.idle": "2024-05-06T12:04:15.284825Z",
     "shell.execute_reply": "2024-05-06T12:04:15.284025Z"
    },
    "papermill": {
     "duration": 0.071383,
     "end_time": "2024-05-06T12:04:15.287827",
     "exception": false,
     "start_time": "2024-05-06T12:04:15.216444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "image=x_train.iloc[0]\n",
    "# Convert the dataset to a 2D numpy array\n",
    "image_array = image.to_numpy()\n",
    "\n",
    "# Reshape the 1D array to a 2D image (e.g., 5x5 pixels)\n",
    "image_shape = (28, 28) #this is based on 784 values which is from 28x28\n",
    "image = image_array.reshape(image_shape)\n",
    "\n",
    "# Display the image\n",
    "plt.imshow(image, cmap='gray') \n",
    "#The cmap parameter specifies the color map to be used for displaying the image. In this case, 'gray' indicates that the image should be displayed in grayscale (black and white).\n",
    "plt.axis('off')  # Hide axes\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e782254e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:15.324529Z",
     "iopub.status.busy": "2024-05-06T12:04:15.323536Z",
     "iopub.status.idle": "2024-05-06T12:04:15.410026Z",
     "shell.execute_reply": "2024-05-06T12:04:15.408859Z"
    },
    "papermill": {
     "duration": 0.108034,
     "end_time": "2024-05-06T12:04:15.412989",
     "exception": false,
     "start_time": "2024-05-06T12:04:15.304955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "image=x_train.iloc[78]\n",
    "# Convert the dataset to a 2D numpy array\n",
    "image_array = image.to_numpy()\n",
    "\n",
    "# Reshape the 1D array to a 2D image (e.g., 5x5 pixels)\n",
    "image_shape = (28, 28) #this is based on 784 values which is from 28x28\n",
    "image = image_array.reshape(image_shape)\n",
    "\n",
    "# Display the image\n",
    "plt.imshow(image, cmap='gray') \n",
    "#The cmap parameter specifies the color map to be used for displaying the image. In this case, 'gray' indicates that the image should be displayed in grayscale (black and white).\n",
    "plt.axis('off')  # Hide axes\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ce18ea7",
   "metadata": {
    "papermill": {
     "duration": 0.016599,
     "end_time": "2024-05-06T12:04:15.446966",
     "exception": false,
     "start_time": "2024-05-06T12:04:15.430367",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Normalization, Reshape and Label Encoding\n",
    "## Normalization:\n",
    "**Purpose**: Normalization ensures that pixel values are within a consistent range, typically between 0 and 1 or -1 and 1.\n",
    "\n",
    "**Reasons**:\n",
    "* **Stabilizes Training**: Normalizing pixel values prevents large variations in input data, which can lead to unstable training. It helps the model converge faster and more reliably.\n",
    "* **Gradient Descent**: Gradient descent optimization algorithms work better when features are on a similar scale.\n",
    "* **Activation Functions**: Some activation functions (e.g., sigmoid, tanh) perform better with normalized inputs.\n",
    "* **Example**: Divide pixel values by 255 to scale them between 0 and 1.\n",
    "\n",
    "## Reshaping:\n",
    "**Purpose**: Images are typically represented as 2D arrays (height x width x channels). CNNs expect a specific input shape.\n",
    "\n",
    "**Reasons**:\n",
    "* **Input Shape**: CNNs require a consistent input shape (e.g., (height, width, channels)).\n",
    "* **Flattening**: If using fully connected layers after CNN layers, reshaping is necessary to flatten the 2D feature maps into a 1D vector.\n",
    "* **Example**: Reshape a grayscale image (28x28 pixels) to (28, 28, 1) or an RGB image (28x28x3) to (28, 28, 3).\n",
    "\n",
    "## Label Encoding:\n",
    "**Purpose**: Convert categorical labels (classes) into numerical representations.\n",
    "\n",
    "**Reasons**:\n",
    "* **Model Input**: CNNs require numerical labels for training.\n",
    "* **Loss Calculation**: Loss functions (e.g., cross-entropy) compare predicted class probabilities with true labels.\n",
    "* **Example**: Encode class labels (e.g., “cat,” “dog,” “bird”) as integers (e.g., 0, 1, 2).\n",
    "\n",
    "2 => [0,0,1,0,0,0,0,0,0,0]\n",
    "\n",
    "4 => [0,0,0,0,1,0,0,0,0,0]\n",
    "\n",
    "### Can We Proceed Without These Steps?\n",
    "\n",
    "* Technically, you can train a CNN without normalization, reshaping, or label encoding, but it’s not recommended.\n",
    "* Skipping normalization may lead to slow convergence or poor performance.\n",
    "* Skipping reshaping will cause shape mismatches between input data and model architecture.\n",
    "* Skipping label encoding will result in incorrect loss calculations and misinterpretation of class probabilities.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "012221d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:15.483894Z",
     "iopub.status.busy": "2024-05-06T12:04:15.482893Z",
     "iopub.status.idle": "2024-05-06T12:04:15.601282Z",
     "shell.execute_reply": "2024-05-06T12:04:15.600413Z"
    },
    "papermill": {
     "duration": 0.139171,
     "end_time": "2024-05-06T12:04:15.603588",
     "exception": false,
     "start_time": "2024-05-06T12:04:15.464417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#normalize\n",
    "\n",
    "x_train=x_train/255.0 \n",
    "test=test/255.0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b5ac8c15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:15.625391Z",
     "iopub.status.busy": "2024-05-06T12:04:15.625058Z",
     "iopub.status.idle": "2024-05-06T12:04:15.631132Z",
     "shell.execute_reply": "2024-05-06T12:04:15.630337Z"
    },
    "papermill": {
     "duration": 0.019548,
     "end_time": "2024-05-06T12:04:15.633499",
     "exception": false,
     "start_time": "2024-05-06T12:04:15.613951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape:  (42000, 28, 28, 1)\n",
      "test shape:  (28000, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "#reshape\n",
    "\n",
    "x_train=x_train.to_numpy()\n",
    "test=test.to_numpy()\n",
    "\n",
    "x_train=x_train.reshape(-1,28,28,1)\n",
    "#(batch_size, height, width, channels)\n",
    "#The batch size affects how gradients are computed during backpropagation. It impacts the stability and speed of training.\n",
    "test=test.reshape(-1,28,28,1)\n",
    "\n",
    "print(\"x_train shape: \",x_train.shape)\n",
    "print(\"test shape: \",test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "96b87d3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:15.656084Z",
     "iopub.status.busy": "2024-05-06T12:04:15.655010Z",
     "iopub.status.idle": "2024-05-06T12:04:27.033165Z",
     "shell.execute_reply": "2024-05-06T12:04:27.032102Z"
    },
    "papermill": {
     "duration": 11.392036,
     "end_time": "2024-05-06T12:04:27.035729",
     "exception": false,
     "start_time": "2024-05-06T12:04:15.643693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-06 12:04:17.304158: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-05-06 12:04:17.304288: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-05-06 12:04:17.433523: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "#encoding\n",
    "import keras\n",
    "from keras.utils import to_categorical  # convert to one-hot-encoding\n",
    "y_train = to_categorical(y_train, num_classes = 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4edecfaa",
   "metadata": {
    "papermill": {
     "duration": 0.010037,
     "end_time": "2024-05-06T12:04:27.056529",
     "exception": false,
     "start_time": "2024-05-06T12:04:27.046492",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Test train split\n",
    "Since we have aready have split data, the reason we split up here is to use it for validating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "86929cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:27.079696Z",
     "iopub.status.busy": "2024-05-06T12:04:27.079005Z",
     "iopub.status.idle": "2024-05-06T12:04:27.746026Z",
     "shell.execute_reply": "2024-05-06T12:04:27.744674Z"
    },
    "papermill": {
     "duration": 0.681244,
     "end_time": "2024-05-06T12:04:27.748242",
     "exception": false,
     "start_time": "2024-05-06T12:04:27.066998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape (33600, 28, 28, 1)\n",
      "x_test shape (8400, 28, 28, 1)\n",
      "y_train shape (33600, 10)\n",
      "y_test shape (8400, 10)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.2) #splitting 80-20\n",
    "\n",
    "print(\"x_train shape\",x_train.shape)\n",
    "print(\"x_test shape\",x_val.shape)\n",
    "print(\"y_train shape\",y_train.shape)\n",
    "print(\"y_test shape\",y_val.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d124abaf",
   "metadata": {
    "papermill": {
     "duration": 0.009937,
     "end_time": "2024-05-06T12:04:27.768683",
     "exception": false,
     "start_time": "2024-05-06T12:04:27.758746",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training and evaluation\n",
    "\n",
    "* Create models with layers\n",
    "* Compile model\n",
    "* Fit model\n",
    "* Evaluate the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a19f8abc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:27.791065Z",
     "iopub.status.busy": "2024-05-06T12:04:27.790678Z",
     "iopub.status.idle": "2024-05-06T12:04:27.797792Z",
     "shell.execute_reply": "2024-05-06T12:04:27.796870Z"
    },
    "papermill": {
     "duration": 0.020883,
     "end_time": "2024-05-06T12:04:27.799850",
     "exception": false,
     "start_time": "2024-05-06T12:04:27.778967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "\n",
    "from keras.utils import to_categorical # convert to one-hot-encoding\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\n",
    "from keras.optimizers import RMSprop,Adam\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.callbacks import ReduceLROnPlateau"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a28ed75",
   "metadata": {
    "papermill": {
     "duration": 0.010028,
     "end_time": "2024-05-06T12:04:27.820369",
     "exception": false,
     "start_time": "2024-05-06T12:04:27.810341",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Creating CNN model with layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4741baa2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:27.843058Z",
     "iopub.status.busy": "2024-05-06T12:04:27.842659Z",
     "iopub.status.idle": "2024-05-06T12:04:27.986366Z",
     "shell.execute_reply": "2024-05-06T12:04:27.984968Z"
    },
    "papermill": {
     "duration": 0.157692,
     "end_time": "2024-05-06T12:04:27.988623",
     "exception": false,
     "start_time": "2024-05-06T12:04:27.830931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(\n"
     ]
    }
   ],
   "source": [
    "model=Sequential()\n",
    "\n",
    "model.add(Conv2D(32,(3,3),padding='Same',activation='relu',input_shape=(28,28,1)))\n",
    "model.add(MaxPool2D(2,2))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Conv2D(64,(3,3),padding='Same',activation='relu'))\n",
    "model.add(MaxPool2D(2,2))\n",
    "model.add(Dropout(0.2))\n",
    "#fully connected layer\n",
    "model.add(Flatten())\n",
    "model.add(Dense(128,'relu'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(10,'softmax'))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb677b7",
   "metadata": {
    "papermill": {
     "duration": 0.010108,
     "end_time": "2024-05-06T12:04:28.009267",
     "exception": false,
     "start_time": "2024-05-06T12:04:27.999159",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Initializing the optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cce95ea6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:28.032131Z",
     "iopub.status.busy": "2024-05-06T12:04:28.031440Z",
     "iopub.status.idle": "2024-05-06T12:04:28.044022Z",
     "shell.execute_reply": "2024-05-06T12:04:28.042995Z"
    },
    "papermill": {
     "duration": 0.026632,
     "end_time": "2024-05-06T12:04:28.046334",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.019702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "optimizer = Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56972e01",
   "metadata": {
    "papermill": {
     "duration": 0.01016,
     "end_time": "2024-05-06T12:04:28.067045",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.056885",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**learning_rate** specifies the learning rate for the optimizer, **beta_1** and **beta_2** are the exponential decay rates for the moment estimates, and **epsilon** is a small value added to the denominator for numerical stability. \n",
    "\n",
    "These values are the defaults used in TensorFlow's implementation of Adam, but you can adjust them based on your specific needs and the characteristics of your model and dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1076f390",
   "metadata": {
    "papermill": {
     "duration": 0.010145,
     "end_time": "2024-05-06T12:04:28.087606",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.077461",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Compiling the model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4abcaee7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:28.110188Z",
     "iopub.status.busy": "2024-05-06T12:04:28.109543Z",
     "iopub.status.idle": "2024-05-06T12:04:28.118402Z",
     "shell.execute_reply": "2024-05-06T12:04:28.117330Z"
    },
    "papermill": {
     "duration": 0.022588,
     "end_time": "2024-05-06T12:04:28.120608",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.098020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "\n",
    "#categorical_crossentropy--->It generalizes binary cross-entropy to multiple classes. \n",
    "#The model predicts class probabilities for each category, and the loss is minimized based on the true class probabilities 1."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e4ba45f",
   "metadata": {
    "papermill": {
     "duration": 0.010105,
     "end_time": "2024-05-06T12:04:28.141347",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.131242",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The **metrics** argument expects a **list of strings**, even if you’re specifying only one metric. So, always use the list format to ensure proper functionality. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bb2668c",
   "metadata": {
    "papermill": {
     "duration": 0.01009,
     "end_time": "2024-05-06T12:04:28.161866",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.151776",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Say you have a dataset of 10 examples (or samples). You have a batch size of 2, and you've specified you want the algorithm to run for 3 epochs. Therefore, in each epoch, you have 5 batches (10/2 = 5). Each batch gets passed through the algorithm, therefore you have 5 iterations per epoch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4bd368b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:28.184379Z",
     "iopub.status.busy": "2024-05-06T12:04:28.183979Z",
     "iopub.status.idle": "2024-05-06T12:04:28.188175Z",
     "shell.execute_reply": "2024-05-06T12:04:28.187164Z"
    },
    "papermill": {
     "duration": 0.017712,
     "end_time": "2024-05-06T12:04:28.190045",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.172333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "epochs=10\n",
    "batch_size=250"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc1811a6",
   "metadata": {
    "papermill": {
     "duration": 0.010067,
     "end_time": "2024-05-06T12:04:28.210500",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.200433",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Augumentation\n",
    "\n",
    " Data augmentation supplements the creation of data variations that can help a model improve the accuracy of its predictions.\n",
    " \n",
    "* To avoid overfitting problem, we need to expand artificially our handwritten digit dataset\n",
    "* Alter the training data with small transformations to reproduce the variations of digit.\n",
    "* For example, the number is not centered The scale is not the same (some who write with big/small numbers) The image is rotated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "89099cda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:28.233606Z",
     "iopub.status.busy": "2024-05-06T12:04:28.232947Z",
     "iopub.status.idle": "2024-05-06T12:04:28.324457Z",
     "shell.execute_reply": "2024-05-06T12:04:28.323108Z"
    },
    "papermill": {
     "duration": 0.106045,
     "end_time": "2024-05-06T12:04:28.327080",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.221035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data augmentation\n",
    "datagen = ImageDataGenerator(\n",
    "        featurewise_center=False,  # set input mean to 0 over the dataset\n",
    "        samplewise_center=False,  # set each sample mean to 0\n",
    "        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n",
    "        samplewise_std_normalization=False,  # divide each input by its std\n",
    "        zca_whitening=False,  # dimesion reduction\n",
    "        rotation_range=5,  # randomly rotate images in the range 5 degrees\n",
    "        zoom_range = 0.1, # Randomly zoom image 10%\n",
    "        width_shift_range=0.1,  # randomly shift images horizontally 10%\n",
    "        height_shift_range=0.1,  # randomly shift images vertically 10%\n",
    "        horizontal_flip=False,  # randomly flip images\n",
    "        vertical_flip=False)  # randomly flip images\n",
    "\n",
    "datagen.fit(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7343d75",
   "metadata": {
    "papermill": {
     "duration": 0.010069,
     "end_time": "2024-05-06T12:04:28.347699",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.337630",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Fitting the model\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e08e57f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:04:28.371540Z",
     "iopub.status.busy": "2024-05-06T12:04:28.370368Z",
     "iopub.status.idle": "2024-05-06T12:06:50.708879Z",
     "shell.execute_reply": "2024-05-06T12:06:50.707549Z"
    },
    "papermill": {
     "duration": 142.352778,
     "end_time": "2024-05-06T12:06:50.711553",
     "exception": false,
     "start_time": "2024-05-06T12:04:28.358775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:120: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
      "  self._warn_if_super_not_called()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 171ms/step - accuracy: 0.5706 - loss: 1.2877 - val_accuracy: 0.9655 - val_loss: 0.1256\n",
      "Epoch 2/10\n",
      "\u001b[1m  1/134\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m16s\u001b[0m 125ms/step - accuracy: 0.9240 - loss: 0.2923"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n",
      "  self.gen.throw(typ, value, traceback)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 14ms/step - accuracy: 0.9240 - loss: 0.2923 - val_accuracy: 0.9667 - val_loss: 0.1227\n",
      "Epoch 3/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 165ms/step - accuracy: 0.9166 - loss: 0.2702 - val_accuracy: 0.9761 - val_loss: 0.0799\n",
      "Epoch 4/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 13ms/step - accuracy: 0.9640 - loss: 0.1514 - val_accuracy: 0.9760 - val_loss: 0.0827\n",
      "Epoch 5/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 165ms/step - accuracy: 0.9425 - loss: 0.1826 - val_accuracy: 0.9818 - val_loss: 0.0626\n",
      "Epoch 6/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - accuracy: 0.9600 - loss: 0.1672 - val_accuracy: 0.9811 - val_loss: 0.0642\n",
      "Epoch 7/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 163ms/step - accuracy: 0.9592 - loss: 0.1325 - val_accuracy: 0.9827 - val_loss: 0.0555\n",
      "Epoch 8/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 13ms/step - accuracy: 0.9680 - loss: 0.1043 - val_accuracy: 0.9831 - val_loss: 0.0538\n",
      "Epoch 9/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 164ms/step - accuracy: 0.9662 - loss: 0.1125 - val_accuracy: 0.9840 - val_loss: 0.0480\n",
      "Epoch 10/10\n",
      "\u001b[1m134/134\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 13ms/step - accuracy: 0.9800 - loss: 0.1045 - val_accuracy: 0.9843 - val_loss: 0.0481\n"
     ]
    }
   ],
   "source": [
    "# Fit the model\n",
    "\n",
    "train_iterator = datagen.flow(x_train, y_train, batch_size=batch_size)\n",
    "\n",
    "\"\"\"This line creates an iterator for data augmentation using the ImageDataGenerator (datagen).\n",
    "It generates augmented batches of training data.\n",
    "The x_train and y_train are the input features (images) and corresponding labels (target values) for your training dataset.\n",
    "The batch_size determines how many samples are processed at once in each batch.\"\"\"\n",
    "\n",
    "\n",
    "# Train your model\n",
    "history = model.fit(train_iterator,epochs = epochs, validation_data = (x_val,y_val), steps_per_epoch=len(x_train) // batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2952854e",
   "metadata": {
    "papermill": {
     "duration": 0.055885,
     "end_time": "2024-05-06T12:06:50.823322",
     "exception": false,
     "start_time": "2024-05-06T12:06:50.767437",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Converting the results saved as dataset\n",
    "\n",
    "\n",
    "The **keras.callbacks.History** (which we saved here as **history**)object returned by the model.fit() method contains information about the training process, including metrics such as loss and accuracy recorded at each epoch. To access the contents inside the History object, you can use the following methods:\n",
    "\n",
    "**Accessing Training Metrics:**\n",
    "The **History** object contains a dictionary called **history** that holds the training metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "304f06da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:06:50.938890Z",
     "iopub.status.busy": "2024-05-06T12:06:50.938473Z",
     "iopub.status.idle": "2024-05-06T12:06:50.951313Z",
     "shell.execute_reply": "2024-05-06T12:06:50.950530Z"
    },
    "papermill": {
     "duration": 0.071912,
     "end_time": "2024-05-06T12:06:50.953395",
     "exception": false,
     "start_time": "2024-05-06T12:06:50.881483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>loss</th>\n",
       "      <th>val_accuracy</th>\n",
       "      <th>val_loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.744888</td>\n",
       "      <td>0.783589</td>\n",
       "      <td>0.965476</td>\n",
       "      <td>0.125551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.924000</td>\n",
       "      <td>0.292340</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>0.122677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.927976</td>\n",
       "      <td>0.234551</td>\n",
       "      <td>0.976071</td>\n",
       "      <td>0.079863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.964000</td>\n",
       "      <td>0.151428</td>\n",
       "      <td>0.975952</td>\n",
       "      <td>0.082720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.947436</td>\n",
       "      <td>0.171227</td>\n",
       "      <td>0.981786</td>\n",
       "      <td>0.062600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.960000</td>\n",
       "      <td>0.167198</td>\n",
       "      <td>0.981071</td>\n",
       "      <td>0.064237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.958801</td>\n",
       "      <td>0.132675</td>\n",
       "      <td>0.982738</td>\n",
       "      <td>0.055478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.968000</td>\n",
       "      <td>0.104347</td>\n",
       "      <td>0.983095</td>\n",
       "      <td>0.053819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.965547</td>\n",
       "      <td>0.111971</td>\n",
       "      <td>0.984048</td>\n",
       "      <td>0.048004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.980000</td>\n",
       "      <td>0.104515</td>\n",
       "      <td>0.984286</td>\n",
       "      <td>0.048069</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   accuracy      loss  val_accuracy  val_loss\n",
       "0  0.744888  0.783589      0.965476  0.125551\n",
       "1  0.924000  0.292340      0.966667  0.122677\n",
       "2  0.927976  0.234551      0.976071  0.079863\n",
       "3  0.964000  0.151428      0.975952  0.082720\n",
       "4  0.947436  0.171227      0.981786  0.062600\n",
       "5  0.960000  0.167198      0.981071  0.064237\n",
       "6  0.958801  0.132675      0.982738  0.055478\n",
       "7  0.968000  0.104347      0.983095  0.053819\n",
       "8  0.965547  0.111971      0.984048  0.048004\n",
       "9  0.980000  0.104515      0.984286  0.048069"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history_df= pd.DataFrame(history.history)\n",
    "history_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39e0a366",
   "metadata": {
    "papermill": {
     "duration": 0.055013,
     "end_time": "2024-05-06T12:06:51.064393",
     "exception": false,
     "start_time": "2024-05-06T12:06:51.009380",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Plotting the **Training and Validation accuracy and loss**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f6ed9e75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:06:51.177698Z",
     "iopub.status.busy": "2024-05-06T12:06:51.177319Z",
     "iopub.status.idle": "2024-05-06T12:06:51.738415Z",
     "shell.execute_reply": "2024-05-06T12:06:51.737340Z"
    },
    "papermill": {
     "duration": 0.620574,
     "end_time": "2024-05-06T12:06:51.740729",
     "exception": false,
     "start_time": "2024-05-06T12:06:51.120155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Validation Loss: 0.0480\n",
      "Best Validation Accuracy: 0.9843\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "print((\"Best Validation Loss: {:0.4f}\" +\\\n",
    "      \"\\nBest Validation Accuracy: {:0.4f}\")\\\n",
    "      .format(history_df['val_loss'].min(), \n",
    "              history_df['val_accuracy'].max()))\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(history_df['loss'], label='Training Loss')\n",
    "plt.plot(history_df['val_loss'], label='Validation Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Training and Validation Loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(history_df['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history_df['val_accuracy'], label='Validation Accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Training and Validation Accuracy')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8384acc2",
   "metadata": {
    "papermill": {
     "duration": 0.056452,
     "end_time": "2024-05-06T12:06:51.854717",
     "exception": false,
     "start_time": "2024-05-06T12:06:51.798265",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Testing with new samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "51c6f7d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T12:06:51.970934Z",
     "iopub.status.busy": "2024-05-06T12:06:51.969896Z",
     "iopub.status.idle": "2024-05-06T12:06:53.785184Z",
     "shell.execute_reply": "2024-05-06T12:06:53.784052Z"
    },
    "papermill": {
     "duration": 1.875345,
     "end_time": "2024-05-06T12:06:53.787186",
     "exception": false,
     "start_time": "2024-05-06T12:06:51.911841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 73ms/step\n",
      "Predicted Digit: 5\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Digit: 2\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "Predicted Digit: 7\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Predicted Digit: 8\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Predicted Digit: 5\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "# Load the sample image\n",
    "\n",
    "for i in range(1, 6):  # Assuming you have images named test1.jpg, test2.jpg, ..., test5.jpg\n",
    "    # Construct the filename for the current image\n",
    "    image_path = f'/kaggle/input/sample-test-set/test {i}.jpg'\n",
    "    test_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)  # Replace 'sample_image.jpg' with your image file path\n",
    "\n",
    "\n",
    "    # Preview sample image\n",
    "    plt.imshow(test_image, cmap='gray')\n",
    "\n",
    "    # Format Image\n",
    "    img_resized = cv2.resize(test_image, (28, 28), interpolation=cv2.INTER_LINEAR)\n",
    "    img_resized = cv2.bitwise_not(img_resized)\n",
    "\n",
    "    # Preview reformatted image\n",
    "    plt.imshow(img_resized, cmap='gray')\n",
    "    plt.show()\n",
    "\n",
    "    # Prepare the image for prediction\n",
    "    input_image = img_resized.reshape(1, 28, 28, 1)  # Reshape to match the input format of your model\n",
    "    input_image = input_image.astype('float32') / 255  # Normalize the pixel values\n",
    "\n",
    "    prediction = model.predict(input_image)\n",
    "    predicted_digit = np.argmax(prediction)\n",
    "\n",
    "    print(\"Predicted Digit:\", predicted_digit)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de085b56",
   "metadata": {
    "papermill": {
     "duration": 0.059836,
     "end_time": "2024-05-06T12:06:53.906502",
     "exception": false,
     "start_time": "2024-05-06T12:06:53.846666",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Out of 5 test samples, it was able to identify only 2 correctly"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    },
    {
     "datasetId": 4950013,
     "sourceId": 8335126,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 170.915325,
   "end_time": "2024-05-06T12:06:55.589919",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-06T12:04:04.674594",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
